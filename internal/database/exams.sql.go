// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exams.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExam = `-- name: CreateExam :one
WITH upsert as (
    INSERT INTO exams (
        visit_id, -- $1
        mrn_id, -- $2
        site_id, -- $3
        procedure_id, -- $4
        ordering_physician_id, -- $5
        accession, -- $6
        current_status, -- $7
        schedule_dt, -- $8
        begin_exam_dt, -- $9
        end_exam_dt, -- $10
        exam_cancelled_dt, -- $11
        message_id, -- $12
	sending_app, -- $13
	priority -- $14
    )
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
    ON CONFLICT (sending_app, accession) DO UPDATE
    SET
        updated_at = CURRENT_TIMESTAMP,
        visit_id = EXCLUDED.visit_id,
        mrn_id = EXCLUDED.mrn_id,
        site_id = EXCLUDED.site_id,
        procedure_id = EXCLUDED.procedure_id,
        ordering_physician_id = EXCLUDED.ordering_physician_id,
        current_status = COALESCE(NULLIF(EXCLUDED.current_status, ''), exams.current_status),
        schedule_dt = COALESCE(EXCLUDED.schedule_dt, exams.schedule_dt),
        begin_exam_dt = COALESCE(EXCLUDED.begin_exam_dt, exams.begin_exam_dt),
        end_exam_dt = COALESCE(EXCLUDED.end_exam_dt, exams.end_exam_dt),
        exam_cancelled_dt = COALESCE(EXCLUDED.exam_cancelled_dt, exams.exam_cancelled_dt),
        message_id = EXCLUDED.message_id
    WHERE
        exams.visit_id IS DISTINCT FROM EXCLUDED.visit_id
        OR exams.mrn_id IS DISTINCT FROM EXCLUDED.mrn_id
        OR exams.site_id IS DISTINCT FROM EXCLUDED.site_id
        OR exams.procedure_id IS DISTINCT FROM EXCLUDED.procedure_id
        OR exams.ordering_physician_id IS DISTINCT FROM EXCLUDED.ordering_physician_id
        OR COALESCE(NULLIF(EXCLUDED.current_status, ''), exams.current_status) IS DISTINCT FROM exams.current_status
        OR COALESCE(EXCLUDED.schedule_dt, exams.schedule_dt) IS DISTINCT FROM exams.schedule_dt
        OR COALESCE(EXCLUDED.begin_exam_dt, exams.begin_exam_dt) IS DISTINCT FROM exams.begin_exam_dt
        OR COALESCE(EXCLUDED.end_exam_dt, exams.end_exam_dt) IS DISTINCT FROM exams.end_exam_dt
        OR COALESCE(EXCLUDED.exam_cancelled_dt, exams.exam_cancelled_dt) IS DISTINCT FROM exams.exam_cancelled_dt
    RETURNING id
)
SELECT id FROM upsert
UNION ALL
SELECT id FROM exams
WHERE
    sending_app = $13
    AND accession = $6
    AND NOT EXISTS (SELECT 1 FROM upsert)
`

type CreateExamParams struct {
	VisitID             pgtype.Int8
	MrnID               pgtype.Int8
	SiteID              pgtype.Int4
	ProcedureID         pgtype.Int4
	OrderingPhysicianID pgtype.Int8
	Accession           string
	CurrentStatus       string
	ScheduleDt          pgtype.Timestamp
	BeginExamDt         pgtype.Timestamp
	EndExamDt           pgtype.Timestamp
	ExamCancelledDt     pgtype.Timestamp
	MessageID           pgtype.Int8
	SendingApp          string
	Priority            pgtype.Text
}

func (q *Queries) CreateExam(ctx context.Context, arg CreateExamParams) (int64, error) {
	row := q.db.QueryRow(ctx, createExam,
		arg.VisitID,
		arg.MrnID,
		arg.SiteID,
		arg.ProcedureID,
		arg.OrderingPhysicianID,
		arg.Accession,
		arg.CurrentStatus,
		arg.ScheduleDt,
		arg.BeginExamDt,
		arg.EndExamDt,
		arg.ExamCancelledDt,
		arg.MessageID,
		arg.SendingApp,
		arg.Priority,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAllExams = `-- name: GetAllExams :many
SELECT id, created_at, updated_at, visit_id, mrn_id, site_id, procedure_id, final_report_id, addendum_report_id, accession, current_status, schedule_dt, begin_exam_dt, end_exam_dt, exam_cancelled_dt, prelim_report_id, ordering_physician_id, message_id, sending_app, priority
FROM exams
`

func (q *Queries) GetAllExams(ctx context.Context) ([]Exam, error) {
	rows, err := q.db.Query(ctx, getAllExams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exam
	for rows.Next() {
		var i Exam
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VisitID,
			&i.MrnID,
			&i.SiteID,
			&i.ProcedureID,
			&i.FinalReportID,
			&i.AddendumReportID,
			&i.Accession,
			&i.CurrentStatus,
			&i.ScheduleDt,
			&i.BeginExamDt,
			&i.EndExamDt,
			&i.ExamCancelledDt,
			&i.PrelimReportID,
			&i.OrderingPhysicianID,
			&i.MessageID,
			&i.SendingApp,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExamById = `-- name: GetExamById :one
SELECT id, created_at, updated_at, visit_id, mrn_id, site_id, procedure_id, final_report_id, addendum_report_id, accession, current_status, schedule_dt, begin_exam_dt, end_exam_dt, exam_cancelled_dt, prelim_report_id, ordering_physician_id, message_id, sending_app, priority FROM exams
WHERE id = $1
`

func (q *Queries) GetExamById(ctx context.Context, id int64) (Exam, error) {
	row := q.db.QueryRow(ctx, getExamById, id)
	var i Exam
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VisitID,
		&i.MrnID,
		&i.SiteID,
		&i.ProcedureID,
		&i.FinalReportID,
		&i.AddendumReportID,
		&i.Accession,
		&i.CurrentStatus,
		&i.ScheduleDt,
		&i.BeginExamDt,
		&i.EndExamDt,
		&i.ExamCancelledDt,
		&i.PrelimReportID,
		&i.OrderingPhysicianID,
		&i.MessageID,
		&i.SendingApp,
		&i.Priority,
	)
	return i, err
}

const getExamBySendingAppAccession = `-- name: GetExamBySendingAppAccession :one
SELECT
    e.id, e.created_at, e.updated_at, e.visit_id, e.mrn_id, e.site_id, e.procedure_id, e.final_report_id, e.addendum_report_id, e.accession, e.current_status, e.schedule_dt, e.begin_exam_dt, e.end_exam_dt, e.exam_cancelled_dt, e.prelim_report_id, e.ordering_physician_id, e.message_id, e.sending_app, e.priority,
    m.created_at AS mrn_created_at,
    m.updated_at AS mrn_updated_at,
    m.mrn AS mrn_value,
    p.created_at AS procedure_created_at,
    p.updated_at AS procedure_updated_at,
    p.code AS procedure_code,
    p.description AS procedure_description,
    p.specialty AS procedure_specialty,
    p.modality AS procedure_modality,
    o.created_at AS provider_created_at,
    o.updated_at AS provider_updated_at,
    o.first_name AS provider_first_name,
    o.last_name AS provider_last_name,
    o.middle_name AS provider_middle_name,
    o.suffix AS provider_suffix,
    o.prefix AS provider_prefix,
    o.degree AS provider_degree,
    o.npi AS provider_npi,
    o.specialty AS provider_specialty,
    s.created_at AS site_created_at,
    s.updated_at AS site_updated_at,
    s.code AS site_code,
    s.name AS site_name,
    s.address AS site_address,
    s.is_cms AS site_is_cms
FROM exams AS e
LEFT JOIN mrns AS m ON e.mrn_id = m.id
LEFT JOIN procedures AS p ON e.procedure_id = p.id and e.site_id = p.site_id
LEFT JOIN physicians AS o ON e.ordering_physician_id = o.id
LEFT JOIN sites AS s ON e.site_id = s.id
WHERE
    e.sending_app = $1
    AND e.accession = $2
`

type GetExamBySendingAppAccessionParams struct {
	SendingApp string
	Accession  string
}

type GetExamBySendingAppAccessionRow struct {
	ID                   int64
	CreatedAt            pgtype.Timestamp
	UpdatedAt            pgtype.Timestamp
	VisitID              pgtype.Int8
	MrnID                pgtype.Int8
	SiteID               pgtype.Int4
	ProcedureID          pgtype.Int4
	FinalReportID        pgtype.Int8
	AddendumReportID     pgtype.Int8
	Accession            string
	CurrentStatus        string
	ScheduleDt           pgtype.Timestamp
	BeginExamDt          pgtype.Timestamp
	EndExamDt            pgtype.Timestamp
	ExamCancelledDt      pgtype.Timestamp
	PrelimReportID       pgtype.Int8
	OrderingPhysicianID  pgtype.Int8
	MessageID            pgtype.Int8
	SendingApp           string
	Priority             pgtype.Text
	MrnCreatedAt         pgtype.Timestamp
	MrnUpdatedAt         pgtype.Timestamp
	MrnValue             pgtype.Text
	ProcedureCreatedAt   pgtype.Timestamp
	ProcedureUpdatedAt   pgtype.Timestamp
	ProcedureCode        pgtype.Text
	ProcedureDescription pgtype.Text
	ProcedureSpecialty   pgtype.Text
	ProcedureModality    pgtype.Text
	ProviderCreatedAt    pgtype.Timestamp
	ProviderUpdatedAt    pgtype.Timestamp
	ProviderFirstName    pgtype.Text
	ProviderLastName     pgtype.Text
	ProviderMiddleName   pgtype.Text
	ProviderSuffix       pgtype.Text
	ProviderPrefix       pgtype.Text
	ProviderDegree       pgtype.Text
	ProviderNpi          pgtype.Text
	ProviderSpecialty    pgtype.Text
	SiteCreatedAt        pgtype.Timestamp
	SiteUpdatedAt        pgtype.Timestamp
	SiteCode             pgtype.Text
	SiteName             pgtype.Text
	SiteAddress          pgtype.Text
	SiteIsCms            pgtype.Bool
}

func (q *Queries) GetExamBySendingAppAccession(ctx context.Context, arg GetExamBySendingAppAccessionParams) (GetExamBySendingAppAccessionRow, error) {
	row := q.db.QueryRow(ctx, getExamBySendingAppAccession, arg.SendingApp, arg.Accession)
	var i GetExamBySendingAppAccessionRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VisitID,
		&i.MrnID,
		&i.SiteID,
		&i.ProcedureID,
		&i.FinalReportID,
		&i.AddendumReportID,
		&i.Accession,
		&i.CurrentStatus,
		&i.ScheduleDt,
		&i.BeginExamDt,
		&i.EndExamDt,
		&i.ExamCancelledDt,
		&i.PrelimReportID,
		&i.OrderingPhysicianID,
		&i.MessageID,
		&i.SendingApp,
		&i.Priority,
		&i.MrnCreatedAt,
		&i.MrnUpdatedAt,
		&i.MrnValue,
		&i.ProcedureCreatedAt,
		&i.ProcedureUpdatedAt,
		&i.ProcedureCode,
		&i.ProcedureDescription,
		&i.ProcedureSpecialty,
		&i.ProcedureModality,
		&i.ProviderCreatedAt,
		&i.ProviderUpdatedAt,
		&i.ProviderFirstName,
		&i.ProviderLastName,
		&i.ProviderMiddleName,
		&i.ProviderSuffix,
		&i.ProviderPrefix,
		&i.ProviderDegree,
		&i.ProviderNpi,
		&i.ProviderSpecialty,
		&i.SiteCreatedAt,
		&i.SiteUpdatedAt,
		&i.SiteCode,
		&i.SiteName,
		&i.SiteAddress,
		&i.SiteIsCms,
	)
	return i, err
}

const getExamIDBySendingAppAccession = `-- name: GetExamIDBySendingAppAccession :one
SELECT id
FROM exams
WHERE
    sending_app = $1
    AND accession = $2
`

type GetExamIDBySendingAppAccessionParams struct {
	SendingApp string
	Accession  string
}

func (q *Queries) GetExamIDBySendingAppAccession(ctx context.Context, arg GetExamIDBySendingAppAccessionParams) (int64, error) {
	row := q.db.QueryRow(ctx, getExamIDBySendingAppAccession, arg.SendingApp, arg.Accession)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateExam = `-- name: UpdateExam :one
UPDATE exams
SET
    updated_at = CURRENT_TIMESTAMP,
    visit_id = $2,
    mrn_id = $3,
    site_id = $4,
    procedure_id = $5,
    ordering_physician_id = $6,
    accession = $7,
    current_status = $8,
    schedule_dt = $9,
    begin_exam_dt = $10,
    end_exam_dt = $11
WHERE id = $1
RETURNING id, created_at, updated_at, visit_id, mrn_id, site_id, procedure_id, final_report_id, addendum_report_id, accession, current_status, schedule_dt, begin_exam_dt, end_exam_dt, exam_cancelled_dt, prelim_report_id, ordering_physician_id, message_id, sending_app, priority
`

type UpdateExamParams struct {
	ID                  int64
	VisitID             pgtype.Int8
	MrnID               pgtype.Int8
	SiteID              pgtype.Int4
	ProcedureID         pgtype.Int4
	OrderingPhysicianID pgtype.Int8
	Accession           string
	CurrentStatus       string
	ScheduleDt          pgtype.Timestamp
	BeginExamDt         pgtype.Timestamp
	EndExamDt           pgtype.Timestamp
}

func (q *Queries) UpdateExam(ctx context.Context, arg UpdateExamParams) (Exam, error) {
	row := q.db.QueryRow(ctx, updateExam,
		arg.ID,
		arg.VisitID,
		arg.MrnID,
		arg.SiteID,
		arg.ProcedureID,
		arg.OrderingPhysicianID,
		arg.Accession,
		arg.CurrentStatus,
		arg.ScheduleDt,
		arg.BeginExamDt,
		arg.EndExamDt,
	)
	var i Exam
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VisitID,
		&i.MrnID,
		&i.SiteID,
		&i.ProcedureID,
		&i.FinalReportID,
		&i.AddendumReportID,
		&i.Accession,
		&i.CurrentStatus,
		&i.ScheduleDt,
		&i.BeginExamDt,
		&i.EndExamDt,
		&i.ExamCancelledDt,
		&i.PrelimReportID,
		&i.OrderingPhysicianID,
		&i.MessageID,
		&i.SendingApp,
		&i.Priority,
	)
	return i, err
}

const updateExamAddendumReport = `-- name: UpdateExamAddendumReport :one
UPDATE exams
SET
    updated_at = CURRENT_TIMESTAMP,
    addendum_report_id = $2
WHERE id = $1
RETURNING id, created_at, updated_at, visit_id, mrn_id, site_id, procedure_id, final_report_id, addendum_report_id, accession, current_status, schedule_dt, begin_exam_dt, end_exam_dt, exam_cancelled_dt, prelim_report_id, ordering_physician_id, message_id, sending_app, priority
`

type UpdateExamAddendumReportParams struct {
	ID               int64
	AddendumReportID pgtype.Int8
}

func (q *Queries) UpdateExamAddendumReport(ctx context.Context, arg UpdateExamAddendumReportParams) (Exam, error) {
	row := q.db.QueryRow(ctx, updateExamAddendumReport, arg.ID, arg.AddendumReportID)
	var i Exam
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VisitID,
		&i.MrnID,
		&i.SiteID,
		&i.ProcedureID,
		&i.FinalReportID,
		&i.AddendumReportID,
		&i.Accession,
		&i.CurrentStatus,
		&i.ScheduleDt,
		&i.BeginExamDt,
		&i.EndExamDt,
		&i.ExamCancelledDt,
		&i.PrelimReportID,
		&i.OrderingPhysicianID,
		&i.MessageID,
		&i.SendingApp,
		&i.Priority,
	)
	return i, err
}

const updateExamFinalReport = `-- name: UpdateExamFinalReport :one
UPDATE exams
SET
    updated_at = CURRENT_TIMESTAMP,
    final_report_id = $2
WHERE id = $1
RETURNING id, created_at, updated_at, visit_id, mrn_id, site_id, procedure_id, final_report_id, addendum_report_id, accession, current_status, schedule_dt, begin_exam_dt, end_exam_dt, exam_cancelled_dt, prelim_report_id, ordering_physician_id, message_id, sending_app, priority
`

type UpdateExamFinalReportParams struct {
	ID            int64
	FinalReportID pgtype.Int8
}

func (q *Queries) UpdateExamFinalReport(ctx context.Context, arg UpdateExamFinalReportParams) (Exam, error) {
	row := q.db.QueryRow(ctx, updateExamFinalReport, arg.ID, arg.FinalReportID)
	var i Exam
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VisitID,
		&i.MrnID,
		&i.SiteID,
		&i.ProcedureID,
		&i.FinalReportID,
		&i.AddendumReportID,
		&i.Accession,
		&i.CurrentStatus,
		&i.ScheduleDt,
		&i.BeginExamDt,
		&i.EndExamDt,
		&i.ExamCancelledDt,
		&i.PrelimReportID,
		&i.OrderingPhysicianID,
		&i.MessageID,
		&i.SendingApp,
		&i.Priority,
	)
	return i, err
}

const updateExamPrelimReport = `-- name: UpdateExamPrelimReport :one
UPDATE exams
SET
    updated_at = CURRENT_TIMESTAMP,
    prelim_report_id = $2
WHERE id = $1
RETURNING id, created_at, updated_at, visit_id, mrn_id, site_id, procedure_id, final_report_id, addendum_report_id, accession, current_status, schedule_dt, begin_exam_dt, end_exam_dt, exam_cancelled_dt, prelim_report_id, ordering_physician_id, message_id, sending_app, priority
`

type UpdateExamPrelimReportParams struct {
	ID             int64
	PrelimReportID pgtype.Int8
}

func (q *Queries) UpdateExamPrelimReport(ctx context.Context, arg UpdateExamPrelimReportParams) (Exam, error) {
	row := q.db.QueryRow(ctx, updateExamPrelimReport, arg.ID, arg.PrelimReportID)
	var i Exam
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VisitID,
		&i.MrnID,
		&i.SiteID,
		&i.ProcedureID,
		&i.FinalReportID,
		&i.AddendumReportID,
		&i.Accession,
		&i.CurrentStatus,
		&i.ScheduleDt,
		&i.BeginExamDt,
		&i.EndExamDt,
		&i.ExamCancelledDt,
		&i.PrelimReportID,
		&i.OrderingPhysicianID,
		&i.MessageID,
		&i.SendingApp,
		&i.Priority,
	)
	return i, err
}
