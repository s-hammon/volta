// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: patients.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (
    first_name,
    last_name,
    middle_name,
    suffix,
    prefix,
    degree,
    dob,
    sex,
    ssn,
    home_phone,
    work_phone,
    cell_phone
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12
)
ON CONFLICT (ssn) DO UPDATE
SET first_name = EXCLUDED.first_name,
    last_name = EXCLUDED.last_name,
    middle_name = EXCLUDED.middle_name,
    suffix = EXCLUDED.suffix,
    prefix = EXCLUDED.prefix,
    degree = EXCLUDED.degree,
    dob = EXCLUDED.dob,
    sex = EXCLUDED.sex,
    home_phone = EXCLUDED.home_phone,
    work_phone = EXCLUDED.work_phone,
    cell_phone = EXCLUDED.cell_phone
WHERE patients.first_name IS DISTINCT FROM EXCLUDED.first_name
    OR patients.last_name IS DISTINCT FROM EXCLUDED.last_name
    OR patients.middle_name IS DISTINCT FROM EXCLUDED.middle_name
    OR patients.suffix IS DISTINCT FROM EXCLUDED.suffix
    OR patients.prefix IS DISTINCT FROM EXCLUDED.prefix
    OR patients.degree IS DISTINCT FROM EXCLUDED.degree
    OR patients.dob IS DISTINCT FROM EXCLUDED.dob
    OR patients.sex IS DISTINCT FROM EXCLUDED.sex
    OR patients.home_phone IS DISTINCT FROM EXCLUDED.home_phone
    OR patients.work_phone IS DISTINCT FROM EXCLUDED.work_phone
    OR patients.cell_phone IS DISTINCT FROM EXCLUDED.cell_phone
RETURNING id, created_at, updated_at, first_name, last_name, middle_name, suffix, prefix, degree, dob, sex, ssn, home_phone, work_phone, cell_phone
`

type CreatePatientParams struct {
	FirstName  string
	LastName   string
	MiddleName pgtype.Text
	Suffix     pgtype.Text
	Prefix     pgtype.Text
	Degree     pgtype.Text
	Dob        pgtype.Date
	Sex        string
	Ssn        pgtype.Text
	HomePhone  pgtype.Text
	WorkPhone  pgtype.Text
	CellPhone  pgtype.Text
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, createPatient,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		arg.Suffix,
		arg.Prefix,
		arg.Degree,
		arg.Dob,
		arg.Sex,
		arg.Ssn,
		arg.HomePhone,
		arg.WorkPhone,
		arg.CellPhone,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Suffix,
		&i.Prefix,
		&i.Degree,
		&i.Dob,
		&i.Sex,
		&i.Ssn,
		&i.HomePhone,
		&i.WorkPhone,
		&i.CellPhone,
	)
	return i, err
}

const getPatientByNameSSN = `-- name: GetPatientByNameSSN :one
SELECT id, created_at, updated_at, first_name, last_name, middle_name, suffix, prefix, degree, dob, sex, ssn, home_phone, work_phone, cell_phone
FROM patients
WHERE
    first_name = $1
    AND last_name = $2
    AND dob = $3
    AND ssn = $4
`

type GetPatientByNameSSNParams struct {
	FirstName string
	LastName  string
	Dob       pgtype.Date
	Ssn       pgtype.Text
}

func (q *Queries) GetPatientByNameSSN(ctx context.Context, arg GetPatientByNameSSNParams) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatientByNameSSN,
		arg.FirstName,
		arg.LastName,
		arg.Dob,
		arg.Ssn,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Suffix,
		&i.Prefix,
		&i.Degree,
		&i.Dob,
		&i.Sex,
		&i.Ssn,
		&i.HomePhone,
		&i.WorkPhone,
		&i.CellPhone,
	)
	return i, err
}

const updatePatient = `-- name: UpdatePatient :one
UPDATE patients
SET
    updated_at = CURRENT_TIMESTAMP,
    first_name = $2,
    last_name = $3,
    middle_name = $4,
    suffix = $5,
    prefix = $6,
    degree = $7,
    dob = $8,
    sex = $9,
    ssn = $10,
    home_phone = $11,
    work_phone = $12,
    cell_phone = $13
WHERE id = $1
RETURNING id, created_at, updated_at, first_name, last_name, middle_name, suffix, prefix, degree, dob, sex, ssn, home_phone, work_phone, cell_phone
`

type UpdatePatientParams struct {
	ID         int64
	FirstName  string
	LastName   string
	MiddleName pgtype.Text
	Suffix     pgtype.Text
	Prefix     pgtype.Text
	Degree     pgtype.Text
	Dob        pgtype.Date
	Sex        string
	Ssn        pgtype.Text
	HomePhone  pgtype.Text
	WorkPhone  pgtype.Text
	CellPhone  pgtype.Text
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, updatePatient,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		arg.Suffix,
		arg.Prefix,
		arg.Degree,
		arg.Dob,
		arg.Sex,
		arg.Ssn,
		arg.HomePhone,
		arg.WorkPhone,
		arg.CellPhone,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Suffix,
		&i.Prefix,
		&i.Degree,
		&i.Dob,
		&i.Sex,
		&i.Ssn,
		&i.HomePhone,
		&i.WorkPhone,
		&i.CellPhone,
	)
	return i, err
}
