// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: patients.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (
    first_name,
    last_name,
    middle_name,
    suffix,
    prefix,
    degree,
    dob,
    sex,
    ssn,
    home_phone,
    work_phone,
    cell_phone
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12
)
RETURNING id, created_at, updated_at, first_name, last_name, middle_name, suffix, prefix, degree, dob, sex, ssn, home_phone, work_phone, cell_phone
`

type CreatePatientParams struct {
	FirstName  string
	LastName   string
	MiddleName pgtype.Text
	Suffix     pgtype.Text
	Prefix     pgtype.Text
	Degree     pgtype.Text
	Dob        pgtype.Date
	Sex        string
	Ssn        pgtype.Text
	HomePhone  pgtype.Text
	WorkPhone  pgtype.Text
	CellPhone  pgtype.Text
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, createPatient,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		arg.Suffix,
		arg.Prefix,
		arg.Degree,
		arg.Dob,
		arg.Sex,
		arg.Ssn,
		arg.HomePhone,
		arg.WorkPhone,
		arg.CellPhone,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Suffix,
		&i.Prefix,
		&i.Degree,
		&i.Dob,
		&i.Sex,
		&i.Ssn,
		&i.HomePhone,
		&i.WorkPhone,
		&i.CellPhone,
	)
	return i, err
}

const getPatientByNameSSN = `-- name: GetPatientByNameSSN :one
SELECT id, created_at, updated_at, first_name, last_name, middle_name, suffix, prefix, degree, dob, sex, ssn, home_phone, work_phone, cell_phone
FROM patients
WHERE
    first_name = $1
    AND last_name = $2
    AND dob = $3
    AND ssn = $4
`

type GetPatientByNameSSNParams struct {
	FirstName string
	LastName  string
	Dob       pgtype.Date
	Ssn       pgtype.Text
}

func (q *Queries) GetPatientByNameSSN(ctx context.Context, arg GetPatientByNameSSNParams) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatientByNameSSN,
		arg.FirstName,
		arg.LastName,
		arg.Dob,
		arg.Ssn,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Suffix,
		&i.Prefix,
		&i.Degree,
		&i.Dob,
		&i.Sex,
		&i.Ssn,
		&i.HomePhone,
		&i.WorkPhone,
		&i.CellPhone,
	)
	return i, err
}
