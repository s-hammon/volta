// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: physicians.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPhysician = `-- name: CreatePhysician :one
INSERT INTO physicians (
    first_name,
    last_name,
    middle_name,
    suffix,
    prefix,
    degree,
    npi,
    specialty
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
RETURNING id, created_at, updated_at, first_name, last_name, middle_name, suffix, prefix, degree, npi, specialty
`

type CreatePhysicianParams struct {
	FirstName  string
	LastName   string
	MiddleName pgtype.Text
	Suffix     pgtype.Text
	Prefix     pgtype.Text
	Degree     pgtype.Text
	Npi        string
	Specialty  pgtype.Text
}

func (q *Queries) CreatePhysician(ctx context.Context, arg CreatePhysicianParams) (Physician, error) {
	row := q.db.QueryRow(ctx, createPhysician,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		arg.Suffix,
		arg.Prefix,
		arg.Degree,
		arg.Npi,
		arg.Specialty,
	)
	var i Physician
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Suffix,
		&i.Prefix,
		&i.Degree,
		&i.Npi,
		&i.Specialty,
	)
	return i, err
}

const getPhysicianByNameNPI = `-- name: GetPhysicianByNameNPI :one
SELECT id, created_at, updated_at, first_name, last_name, middle_name, suffix, prefix, degree, npi, specialty
FROM physicians
WHERE
    first_name = $1
    AND last_name = $2
    AND npi = $3
`

type GetPhysicianByNameNPIParams struct {
	FirstName string
	LastName  string
	Npi       string
}

func (q *Queries) GetPhysicianByNameNPI(ctx context.Context, arg GetPhysicianByNameNPIParams) (Physician, error) {
	row := q.db.QueryRow(ctx, getPhysicianByNameNPI, arg.FirstName, arg.LastName, arg.Npi)
	var i Physician
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Suffix,
		&i.Prefix,
		&i.Degree,
		&i.Npi,
		&i.Specialty,
	)
	return i, err
}
