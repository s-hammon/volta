// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: procedures.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProcedure = `-- name: CreateProcedure :one
WITH upsert AS (
    INSERT INTO procedures (site_id, code, description, specialty, modality)
    VALUES ($1, $2, $3, $4, $5)
    ON CONFLICT (site_id, code) DO UPDATE
    SET description = EXCLUDED.description,
        specialty = COALESCE(NULLIF(EXCLUDED.specialty, ''), procedures.specialty),
        modality = COALESCE(NULLIF(EXCLUDED.specialty, ''), procedures.specialty)
    WHERE
        procedures.description IS DISTINCT FROM EXCLUDED.description
        OR COALESCE(NULLIF(EXCLUDED.specialty, ''), procedures.specialty) IS DISTINCT FROM EXCLUDED.specialty
        OR COALESCE(NULLIF(EXCLUDED.specialty, ''), procedures.specialty) IS DISTINCT FROM EXCLUDED.modality
    RETURNING id
)
SELECT id FROM upsert
UNION ALL
SELECT id FROM procedures
WHERE
    site_id = $1
    AND code = $2
    AND NOT EXISTS (SELECT 1 FROM upsert)
`

type CreateProcedureParams struct {
	SiteID      pgtype.Int4
	Code        string
	Description string
	Specialty   pgtype.Text
	Modality    pgtype.Text
}

func (q *Queries) CreateProcedure(ctx context.Context, arg CreateProcedureParams) (int32, error) {
	row := q.db.QueryRow(ctx, createProcedure,
		arg.SiteID,
		arg.Code,
		arg.Description,
		arg.Specialty,
		arg.Modality,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getProcedureById = `-- name: GetProcedureById :one
SELECT id, created_at, updated_at, site_id, code, description, specialty, modality
FROM procedures
WHERE id = $1
`

func (q *Queries) GetProcedureById(ctx context.Context, id int32) (Procedure, error) {
	row := q.db.QueryRow(ctx, getProcedureById, id)
	var i Procedure
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SiteID,
		&i.Code,
		&i.Description,
		&i.Specialty,
		&i.Modality,
	)
	return i, err
}

const getProcedureBySiteIDCode = `-- name: GetProcedureBySiteIDCode :one
SELECT id, created_at, updated_at, site_id, code, description, specialty, modality
FROM procedures
WHERE
    site_id = $1
    AND code = $2
`

type GetProcedureBySiteIDCodeParams struct {
	SiteID pgtype.Int4
	Code   string
}

func (q *Queries) GetProcedureBySiteIDCode(ctx context.Context, arg GetProcedureBySiteIDCodeParams) (Procedure, error) {
	row := q.db.QueryRow(ctx, getProcedureBySiteIDCode, arg.SiteID, arg.Code)
	var i Procedure
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SiteID,
		&i.Code,
		&i.Description,
		&i.Specialty,
		&i.Modality,
	)
	return i, err
}
