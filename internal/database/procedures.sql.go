// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: procedures.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProcedure = `-- name: CreateProcedure :one
INSERT INTO procedures (site_id, code, description, specialty, modality)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, site_id, code, description, specialty, modality
`

type CreateProcedureParams struct {
	SiteID      pgtype.Int4
	Code        string
	Description string
	Specialty   pgtype.Text
	Modality    pgtype.Text
}

func (q *Queries) CreateProcedure(ctx context.Context, arg CreateProcedureParams) (Procedure, error) {
	row := q.db.QueryRow(ctx, createProcedure,
		arg.SiteID,
		arg.Code,
		arg.Description,
		arg.Specialty,
		arg.Modality,
	)
	var i Procedure
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SiteID,
		&i.Code,
		&i.Description,
		&i.Specialty,
		&i.Modality,
	)
	return i, err
}

const getProcedureBySiteIDCode = `-- name: GetProcedureBySiteIDCode :one
SELECT id, created_at, updated_at, site_id, code, description, specialty, modality
FROM procedures
WHERE
    site_id = $1
    AND code = $2
`

type GetProcedureBySiteIDCodeParams struct {
	SiteID pgtype.Int4
	Code   string
}

func (q *Queries) GetProcedureBySiteIDCode(ctx context.Context, arg GetProcedureBySiteIDCodeParams) (Procedure, error) {
	row := q.db.QueryRow(ctx, getProcedureBySiteIDCode, arg.SiteID, arg.Code)
	var i Procedure
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SiteID,
		&i.Code,
		&i.Description,
		&i.Specialty,
		&i.Modality,
	)
	return i, err
}
