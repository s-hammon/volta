// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sites.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSite = `-- name: CreateSite :one
WITH upsert AS (
    INSERT INTO sites (
        code, -- $1
        name, -- $2
        address, -- $3
        is_cms, -- $4
        message_id -- $5
    )
    VALUES ($1, $2, $3, $4, $5)
    ON CONFLICT (code) DO NOTHING
    RETURNING id
)
SELECT id FROM upsert
UNION ALL
SELECT id FROM sites
WHERE code = $1
    AND NOT EXISTS (SELECT 1 FROM upsert)
`

type CreateSiteParams struct {
	Code      string
	Name      pgtype.Text
	Address   string
	IsCms     bool
	MessageID pgtype.Int8
}

func (q *Queries) CreateSite(ctx context.Context, arg CreateSiteParams) (int32, error) {
	row := q.db.QueryRow(ctx, createSite,
		arg.Code,
		arg.Name,
		arg.Address,
		arg.IsCms,
		arg.MessageID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getSiteByCode = `-- name: GetSiteByCode :one
SELECT id, created_at, updated_at, code, name, address, is_cms, message_id, metasite_id
FROM sites
WHERE code = $1
`

func (q *Queries) GetSiteByCode(ctx context.Context, code string) (Site, error) {
	row := q.db.QueryRow(ctx, getSiteByCode, code)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Code,
		&i.Name,
		&i.Address,
		&i.IsCms,
		&i.MessageID,
		&i.MetasiteID,
	)
	return i, err
}

const getSiteById = `-- name: GetSiteById :one
SELECT id, created_at, updated_at, code, name, address, is_cms, message_id, metasite_id
FROM sites
WHERE id = $1
`

func (q *Queries) GetSiteById(ctx context.Context, id int32) (Site, error) {
	row := q.db.QueryRow(ctx, getSiteById, id)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Code,
		&i.Name,
		&i.Address,
		&i.IsCms,
		&i.MessageID,
		&i.MetasiteID,
	)
	return i, err
}
