// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: visits.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVisit = `-- name: CreateVisit :one
INSERT INTO visits (
    outside_system_id,
    site_id,
    mrn_id,
    number,
    patient_type
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, outside_system_id, site_id, mrn_id, number, patient_type
`

type CreateVisitParams struct {
	OutsideSystemID pgtype.Int4
	SiteID          pgtype.Int4
	MrnID           pgtype.Int8
	Number          string
	PatientType     int16
}

func (q *Queries) CreateVisit(ctx context.Context, arg CreateVisitParams) (Visit, error) {
	row := q.db.QueryRow(ctx, createVisit,
		arg.OutsideSystemID,
		arg.SiteID,
		arg.MrnID,
		arg.Number,
		arg.PatientType,
	)
	var i Visit
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OutsideSystemID,
		&i.SiteID,
		&i.MrnID,
		&i.Number,
		&i.PatientType,
	)
	return i, err
}

const getVisitBySiteIdNumber = `-- name: GetVisitBySiteIdNumber :one
SELECT id, created_at, updated_at, outside_system_id, site_id, mrn_id, number, patient_type
FROM visits
WHERE
    site_id = $1
    AND number = $2
`

type GetVisitBySiteIdNumberParams struct {
	SiteID pgtype.Int4
	Number string
}

func (q *Queries) GetVisitBySiteIdNumber(ctx context.Context, arg GetVisitBySiteIdNumberParams) (Visit, error) {
	row := q.db.QueryRow(ctx, getVisitBySiteIdNumber, arg.SiteID, arg.Number)
	var i Visit
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OutsideSystemID,
		&i.SiteID,
		&i.MrnID,
		&i.Number,
		&i.PatientType,
	)
	return i, err
}
